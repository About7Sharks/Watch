'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// UPDATED VERSION OF https://github.com/chadsmith/node-liftmaster/blob/master/liftmaster.js
var axios = require('axios')

var constants = require('./constants');

var returnError = function returnError(returnCode, err) {
  var result = {
    returnCode: returnCode,
    message: constants.errorMessages[returnCode]
  };
  if (err) {
    result.unhandledError = err;
  }
  return result;
};

var getDeviceState = function getDeviceState(securityToken, id, attributeName) {
  if (!securityToken) {
    return Promise.resolve(returnError(13));
  }

  return axios({
    method: 'get',
    url: constants.endpoint + '/api/v4/deviceattribute/getdeviceattribute',
    headers: {
      MyQApplicationId: constants.appId,
      SecurityToken: securityToken
    },
    params: {
      MyQDeviceId: id,
      AttributeName: attributeName
    }
  }).then(function (response) {
    if (!response || !response.data) {
      return returnError(12);
    }

    var data = response.data;


    if (data.ReturnCode === '-3333') {
      return returnError(13);
    } else if (!data.ReturnCode) {
      return returnError(11);
    } else if (!data.AttributeValue) {
      return returnError(15);
    }

    var state = parseInt(data.AttributeValue, 10);
    var result = {
      returnCode: 0,
      state: state
    };
    return result;
  }).catch(function (err) {
    if (err.statusCode === 400) {
      return returnError(15);
    }

    return returnError(11, err);
  });
};

var setDeviceState = function setDeviceState(securityToken, id, toggle, attributeName) {
  if (!securityToken) {
    return Promise.resolve(returnError(13));
  } else if (toggle !== 0 && toggle !== 1) {
    return Promise.resolve(returnError(15));
  }

  return axios({
    method: 'put',
    url: constants.endpoint + '/api/v4/deviceattribute/putdeviceattribute',
    headers: {
      MyQApplicationId: constants.appId,
      SecurityToken: securityToken
    },
    data: {
      MyQDeviceId: id,
      AttributeName: attributeName,
      AttributeValue: toggle
    }
  }).then(function (response) {
    if (!response || !response.data) {
      return returnError(12);
    }

    var data = response.data;


    if (data.ReturnCode === '-3333') {
      return returnError(13);
    } else if (!data.ReturnCode) {
      return returnError(11);
    }

    var result = {
      returnCode: 0
    };
    return result;
  }).catch(function (err) {
    if (err.statusCode === 500) {
      return returnError(15);
    }

    return returnError(11, err);
  });
};

var MyQ = function () {
  function MyQ(username, password) {
    _classCallCheck(this, MyQ);

    this.username = username;
    this.password = password;
  }

  _createClass(MyQ, [{
    key: 'login',
    value: function login() {
      var _this = this;

      if (!this.username || !this.password) {
        return Promise.resolve(returnError(14));
      }

      return axios({
        method: 'post',
        url: constants.endpoint + '/api/v4/User/Validate',
        headers: {
          MyQApplicationId: constants.appId
        },
        data: {
          username: this.username,
          password: this.password
        }
      }).then(function (response) {
        if (!response || !response.data) {
          return returnError(12);
        }

        var data = response.data;


        if (data.ReturnCode === '203') {
          return returnError(14);
        } else if (data.ReturnCode === '205') {
          return returnError(16);
        } else if (data.ReturnCode === '207') {
          return returnError(17);
        } else if (!data.SecurityToken) {
          return returnError(11);
        }

        _this.securityToken = data.SecurityToken;
        var result = {
          returnCode: 0,
          token: data.SecurityToken
        };
        return result;
      }).catch(function (err) {
        if (err.statusCode === 500) {
          return returnError(14);
        }

        return returnError(11, err);
      });
    }
  }, {
    key: 'getDevices',
    value: function getDevices(typeIdParams) {
      if (!this.securityToken) {
        return Promise.resolve(returnError(13));
      } else if (typeIdParams === null) {
        return Promise.resolve(returnError(15));
      }

      var typeIds = Array.isArray(typeIdParams) ? typeIdParams : [typeIdParams];

      for (var i = 0; i < typeIds.length; i += 1) {
        var typeId = typeIds[i];
        if (!constants.allTypeIds.includes(typeId)) {
          return returnError(15);
        }
      }

      return axios({
        method: 'get',
        url: constants.endpoint + '/api/v4/userdevicedetails/get',
        headers: {
          MyQApplicationId: constants.appId,
          securityToken: this.securityToken
        }
      }).then(function (response) {
        if (!response || !response.data) {
          return returnError(12);
        }

        var data = response.data;


        if (data.ReturnCode === '-3333') {
          return returnError(13);
        } else if (!data.Devices) {
          return returnError(11);
        }

        var result = {
          returnCode: 0
        };

        var modifiedDevices = [];
        for (var _i = 0; _i < data.Devices.length; _i += 1) {
          var device = data.Devices[_i];
          if (typeIds.includes(device.MyQDeviceTypeId)) {
            var modifiedDevice = {
              id: device.MyQDeviceId,
              typeId: device.MyQDeviceTypeId,
              typeName: device.MyQDeviceTypeName,
              serialNumber: device.SerialNumber
            };
            for (var j = 0; j < device.Attributes.length; j += 1) {
              var attribute = device.Attributes[j];
              if (attribute.AttributeDisplayName === 'online') {
                modifiedDevice.online = attribute.Value === 'True';
              } else if (attribute.AttributeDisplayName === 'desc') {
                modifiedDevice.name = attribute.Value;
              } else if (attribute.AttributeDisplayName === 'doorstate') {
                modifiedDevice.doorState = parseInt(attribute.Value, 10);
                modifiedDevice.doorStateDescription = constants.doorStates[modifiedDevice.doorState];
                modifiedDevice.doorStateUpdated = parseInt(attribute.UpdatedTime, 10);
              } else if (attribute.AttributeDisplayName === 'lightstate') {
                modifiedDevice.lightState = parseInt(attribute.Value, 10);
                modifiedDevice.lightStateDescription = constants.lightStates[modifiedDevice.lightState];
                modifiedDevice.lightStateUpdated = parseInt(attribute.UpdatedTime, 10);
              }
            }
            modifiedDevices.push(modifiedDevice);
          }
        }
        result.devices = modifiedDevices;
        return result;
      }).catch(function (err) {
        return returnError(11, err);
      });
    }
  }, {
    key: 'getDoorState',
    value: function getDoorState(id) {
      return getDeviceState(this.securityToken, id, 'doorstate').then(function (result) {
        if (result.returnCode !== 0) {
          return result;
        }

        var newResult = JSON.parse(JSON.stringify(result));
        newResult.doorState = newResult.state;
        newResult.doorStateDescription = constants.doorStates[newResult.doorState];
        delete newResult.state;
        return newResult;
      }).catch(function (err) {
        return returnError(11, err);
      });
    }
  }, {
    key: 'getLightState',
    value: function getLightState(id) {
      return getDeviceState(this.securityToken, id, 'lightstate').then(function (result) {
        if (result.returnCode !== 0) {
          return result;
        }

        var newResult = JSON.parse(JSON.stringify(result));
        newResult.lightState = newResult.state;
        newResult.lightStateDescription = constants.lightStates[newResult.lightState];
        delete newResult.state;
        return newResult;
      }).catch(function (err) {
        return returnError(11, err);
      });
    }
  }, {
    key: 'setDoorState',
    value: function setDoorState(id, toggle) {
      return setDeviceState(this.securityToken, id, toggle, 'desireddoorstate').then(function (result) {
        return result;
      }).catch(function (err) {
        return returnError(11, err);
      });
    }
  }, {
    key: 'setLightState',
    value: function setLightState(id, toggle) {
      return setDeviceState(this.securityToken, id, toggle, 'desiredlightstate').then(function (result) {
        return result;
      }).catch(function (err) {
        return returnError(11, err);
      });
    }
  }]);

  return MyQ;
}();

module.exports = MyQ;